using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using System.Text;
using System.Linq;

namespace FluentIconGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            // Define the path to the Fluent UI System icon pack

            string dir = (args.Length >= 1) ? args[0]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "fluentui-system-icons", "assets");
            string outputProj = (args.Length >= 2) ? args[1]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "FluentSystemIcons", "Fluent.Icons");
            string tempSvgDir = (args.Length >= 3) ? args[2]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                  "FluentIconGenerator");
            string outputFile = Path.Combine(outputProj, "FluentSymbolIcon.g.cs");
            Regex svgReg = new Regex(@"ic_fluent_(?<name>\w+)_(?<size>\d+)_(?<type>regular|filled).svg");

            Directory.CreateDirectory(tempSvgDir);

            #region Source builder setup
            var sourceBuilder = new StringBuilder(@"using System.Collections.Generic;

namespace Fluent.Icons
{

    // DO NOT edit this file! Changes will be overridden whenever the
    // FluentIconGenerator is run.

    /// <summary>
    /// An enum listing all available Fluent System Icon symbols
    /// </summary>
    public enum FluentSymbol {
");
            var FluentSymbolEnumBuilder = new StringBuilder();
            #endregion

            int i = 0;
            var directories = Directory.EnumerateDirectories(dir, @"*", SearchOption.TopDirectoryOnly)
                .OrderBy(d => d);
            foreach (string folder in directories)
            {
                string displayName = folder.Split('\\').Last();
                if (displayName == "Flag Pride")
                {
                    // Multi-color icons don't work in fonts
                    continue;
                }

                string filePart = Path.Combine(folder, "SVG", $"ic_fluent_{displayName.ToLower().Replace(' ', '_')}_24");
                var fileRegular = filePart + "_regular.svg";
                var fileFilled = filePart + "_filled.svg";

                if (File.Exists(fileRegular))
                {
                    var match = svgReg.Match(fileRegular);
                    if (!match.Success)
                    {
                        Console.WriteLine("\tSkipping: Not a valid icon\r\n");
                        continue;
                    }

                    string name = displayName.Replace(" ", "");

                    // Generate the C# source code
                    // TODO: Switch to .NET source generators
                    FluentSymbolEnumBuilder.Append($"        {name} = 0x{0xE900 + i:X4},\r\n");
                    Console.WriteLine($"{name} = 0x{0xE900 + i:X4}");
                    File.Copy(fileRegular, Path.Combine(tempSvgDir, $"{i:0000}_{name}.svg"), true);

                    i++;
                }

                if (File.Exists(fileFilled))
                {
                    var match = svgReg.Match(fileFilled);
                    if (!match.Success)
                    {
                        Console.WriteLine("\tSkipping: Not a valid icon\r\n");
                        continue;
                    }

                    string name = displayName.Replace(" ", "") + "Filled";

                    // Generate the C# source code
                    // TODO: Switch to .NET source generators
                    FluentSymbolEnumBuilder.Append($"        {name} = 0x{0xE900 + i:X4},\r\n");
                    Console.WriteLine($"{name} = 0x{0xE900 + i:X4}\r\n");
                    File.Copy(fileFilled, Path.Combine(tempSvgDir, $"{i:0000}_{name}.svg"), true);

                    i++;
                }
            }

            // Update the document
            sourceBuilder.Append(FluentSymbolEnumBuilder.ToString());
            sourceBuilder.Append(@"
    }
}");

            // Write the generated code to the output file
            File.WriteAllText(outputFile, sourceBuilder.ToString());

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\r\nGeneration complete!");
            Console.ResetColor();
            Console.WriteLine("File at:");
            Console.WriteLine(outputFile);
            Console.WriteLine("\r\nPress any key to exit...");

            Console.Read();
        }
    }
}
