using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using System.Text;
using System.Linq;

namespace FluentIconGenerator
{
    class Program
    {
        const string REGR_SOURCE_FILENAME = "FluentSystemIcons-Regular";
        const string FONT_REGR_FILENAME = REGR_SOURCE_FILENAME + ".ttf";
        const string DICT_REGR_FILENAME = REGR_SOURCE_FILENAME + ".json";

        const string FILL_SOURCE_FILENAME = "FluentSystemIcons-Filled";
        const string FONT_FILL_FILENAME = FILL_SOURCE_FILENAME + ".ttf";
        const string DICT_FILL_FILENAME = FILL_SOURCE_FILENAME + ".json";

        static void Main(string[] args)
        {
            // Define the path to the Fluent UI System icon pack

            string fontsDir = (args.Length >= 1) ? args[0]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "fluentui-system-icons", "fonts");
            string outputProj = (args.Length >= 2) ? args[1]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "FluentSystemIcons", "Fluent.Icons");
            string outputFile = Path.Combine(outputProj, "FluentSymbolIcon.g.cs");
            Regex nameRx = new Regex(@"\""ic_fluent_(?<name>[a-z0-9_]+)+_(?<size>\d+)_(?<type>regular|filled)"":\s*""(?<charcode>\w+)""");

            #region Source builder setup
            var sourceBuilder = new StringBuilder(@"namespace Fluent.Icons.Compact
{

    // DO NOT edit this file! Changes will be overridden whenever the
    // FluentIconGenerator is run.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

    /// <summary>
    /// An enum listing all available Fluent System Icon symbols
    /// </summary>
    public enum FluentSymbol {
");
            var FluentSymbolEnumBuilder = new StringBuilder();
            #endregion

            string[] dictRegr = File.ReadAllLines(Path.Combine(fontsDir, DICT_REGR_FILENAME));
            string[] dictFill = File.ReadAllLines(Path.Combine(fontsDir, DICT_FILL_FILENAME));

            for (int i = 1; i < dictRegr.Length - 1; i++)
            {
                string entry = dictRegr[i];
                if (string.IsNullOrWhiteSpace(entry))
                    continue;

                Match details = nameRx.Match(entry);
                string name = details.Groups["name"].Value;
                string size = details.Groups["size"].Value;
                string type = details.Groups["type"].Value;
                string charCodeStr = details.Groups["charcode"].Value;

                string displayName = "";
                foreach (string namePart in name.Split('_'))
                    displayName += char.ToUpper(namePart[0]) + namePart.Substring(1);

                Console.WriteLine($"{displayName}{size} = {charCodeStr}");
                FluentSymbolEnumBuilder.Append($"        {displayName}{size} = {charCodeStr},\r\n");
            }

            for (int i = 1; i < dictFill.Length - 1; i++)
            {
                string entry = dictFill[i];
                if (string.IsNullOrWhiteSpace(entry))
                    continue;

                Match details = nameRx.Match(entry);
                string name = details.Groups["name"].Value;
                string size = details.Groups["size"].Value;
                string type = details.Groups["type"].Value;
                string charCodeStr = details.Groups["charcode"].Value;

                string displayName = "";
                foreach (string namePart in name.Split('_'))
                    displayName += char.ToUpper(namePart[0]) + namePart.Substring(1);

                // Set the next highest bit to indicate that this is the filled variant
                uint charCode = (1u << (sizeof(char) * 8)) | Convert.ToUInt16(charCodeStr, 16);

                Console.WriteLine($"{displayName}{size}Filled = 0x{charCode:X4}");
                FluentSymbolEnumBuilder.Append($"        {displayName}{size}Filled = 0x{charCode:X4},\r\n");
            }

            // Update the document
            sourceBuilder.Append(FluentSymbolEnumBuilder.ToString());
            sourceBuilder.Append(@"
    }

}");

            // Copy font files to project
            File.Copy(Path.Combine(fontsDir, FONT_REGR_FILENAME),
                Path.Combine(outputProj, "Assets", FONT_REGR_FILENAME), true);
            File.Copy(Path.Combine(fontsDir, FONT_FILL_FILENAME),
                Path.Combine(outputProj, "Assets", FONT_FILL_FILENAME), true);

            // Write the generated code to the output file
            File.WriteAllText(outputFile, sourceBuilder.ToString());

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\r\nGeneration complete!");
            Console.ResetColor();
            Console.WriteLine("File at:");
            Console.WriteLine(outputFile);
            Console.WriteLine("\r\nPress any key to exit...");

            Console.Read();
        }
    }
}
