using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using System.Text;

namespace FluentIconGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            // Define the path to the Fluent UI System icon pack
            
            string dir = (args.Length >= 1) ? args[0]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "fluentui-system-icons", "assets");
            string outputProj = (args.Length >= 2) ? args[1]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "FluentSystemIcons", "Fluent.Icons");
            string outputFile = Path.Combine(outputProj, "FluentSymbolIcon.g.cs");
            Regex svgReg = new Regex(@"ic_fluent_(?<name>\w+)_(?<size>\d+)_(?<type>regular|filled).svg");

            #region Source builder setup
            var sourceBuilder = new StringBuilder(@"using System.Collections.Generic;

namespace Fluent.Icons
{

    // DO NOT edit this file! Changes will be overridden whenever the
    // FluentIconGenerator is run.

    /// <summary>
    /// An enum listing all available Fluent System Icon symbols
    /// </summary>
    public enum FluentSymbol {
[{FluentSymbolEnum}]
    }

    public partial class FluentSymbolIcon
    {
        /// <summary>
        /// A lookup table containing the paths representing each available Fluent System Icon symbol
        /// </summary>
        public static Dictionary<FluentSymbol, string> AllFluentIcons { get; } = new Dictionary<FluentSymbol, string>
        {
[{AllFluentIconsDict}]
        };
    }
}");
            var FluentSymbolEnumBuilder = new StringBuilder();
            var AllFluentIconsBuilder = new StringBuilder();
            #endregion

            foreach (string folder in Directory.EnumerateDirectories(dir, @"*", SearchOption.TopDirectoryOnly))
            {
                var SVGFolder = Path.Combine(folder, "SVG");
                foreach (string path in Directory.EnumerateFiles(SVGFolder, @"*", SearchOption.AllDirectories))
                {
                    var match = svgReg.Match(path);
                    if (!match.Success)
                        continue;

                    // Extrapolate the symbol name from the file path
                    string file = path.Substring(dir.Length + 1); // Also remove the slash
                    Console.WriteLine(file);
                    bool isFilled = match.Groups["type"].Value == "filled";
                    string name = file.Split('\\')[0].Replace(" ", "") + match.Groups["size"].ToString() + (isFilled ? "Filled" : "");

                    #region SVG reading
                    // Load the path data into a string
                    var svg = new XmlDocument();
                    svg.Load(path);
                    // Create namespace manager
                    XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(svg.NameTable);
                    xmlnsManager.AddNamespace("svg", "http://www.w3.org/2000/svg");

                    // Select all SVG path elements
                    XmlNodeList list = svg.LastChild.SelectNodes("//svg:path", xmlnsManager);
                    string xamlPathData = "";
                    foreach (XmlNode pathElem in list)
                    {
                        // Appending SVG paths effectively combines them into one
                        xamlPathData += pathElem.Attributes["d"].Value + " ";
                    }
                    #endregion

                    // Generate the C# source code
                    // TODO: Switch to .NET source generators
                    FluentSymbolEnumBuilder.Append($"        {name},\r\n");
                    AllFluentIconsBuilder.Append($"            {{ FluentSymbol.{name}, \"{xamlPathData}\" }},\r\n");
                } 
            }

            // Update the document
            sourceBuilder.Replace("[{FluentSymbolEnum}]", FluentSymbolEnumBuilder.ToString());
            sourceBuilder.Replace("[{AllFluentIconsDict}]", AllFluentIconsBuilder.ToString());

            // Write the generated code to the output file
            File.WriteAllText(outputFile, sourceBuilder.ToString());

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\r\nGeneration complete!");
            Console.ResetColor();
            Console.WriteLine("File at:");
            Console.WriteLine(outputFile);
            Console.WriteLine("\r\nPress any key to exit...");

            Console.Read();
        }
    }
}
